/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as DashboardIndexImport } from "./routes/dashboard/index"
import { Route as DashboardUsersImport } from "./routes/dashboard/users"
import { Route as DashboardSettingsImport } from "./routes/dashboard/settings"

// Create/Update Routes

const DashboardIndexRoute = DashboardIndexImport.update({
  id: "/dashboard/",
  path: "/dashboard/",
  getParentRoute: () => rootRoute,
} as any)

const DashboardUsersRoute = DashboardUsersImport.update({
  id: "/dashboard/users",
  path: "/dashboard/users",
  getParentRoute: () => rootRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: "/dashboard/settings",
  path: "/dashboard/settings",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/dashboard/settings": {
      id: "/dashboard/settings"
      path: "/dashboard/settings"
      fullPath: "/dashboard/settings"
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof rootRoute
    }
    "/dashboard/users": {
      id: "/dashboard/users"
      path: "/dashboard/users"
      fullPath: "/dashboard/users"
      preLoaderRoute: typeof DashboardUsersImport
      parentRoute: typeof rootRoute
    }
    "/dashboard/": {
      id: "/dashboard/"
      path: "/dashboard"
      fullPath: "/dashboard"
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/dashboard/settings": typeof DashboardSettingsRoute
  "/dashboard/users": typeof DashboardUsersRoute
  "/dashboard": typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  "/dashboard/settings": typeof DashboardSettingsRoute
  "/dashboard/users": typeof DashboardUsersRoute
  "/dashboard": typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/dashboard/settings": typeof DashboardSettingsRoute
  "/dashboard/users": typeof DashboardUsersRoute
  "/dashboard/": typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/dashboard/settings" | "/dashboard/users" | "/dashboard"
  fileRoutesByTo: FileRoutesByTo
  to: "/dashboard/settings" | "/dashboard/users" | "/dashboard"
  id: "__root__" | "/dashboard/settings" | "/dashboard/users" | "/dashboard/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard/settings",
        "/dashboard/users",
        "/dashboard/"
      ]
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx"
    },
    "/dashboard/users": {
      "filePath": "dashboard/users.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
